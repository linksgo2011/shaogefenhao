(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{972:function(a,t,v){"use strict";v.r(t);var _=v(15),s=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h2",{attrs:{id:"标准时间"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标准时间"}},[a._v("#")]),a._v(" 标准时间")]),a._v(" "),v("h4",{attrs:{id:"协调世界时-utc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#协调世界时-utc"}},[a._v("#")]),a._v(" 协调世界时（UTC）")]),a._v(" "),v("p",[a._v("Coordinated Universal Time，使用原子钟来计算时间。")]),a._v(" "),v("p",[a._v("“Z”是协调世界时中 0 时区的标志。")]),a._v(" "),v("p",[a._v("🌰 “09:30 UTC”就写作“09:30Z”或是“0930Z”。")]),a._v(" "),v("p",[a._v("🌰 “14:45:15 UTC”则为“14:45:15Z”或“144515Z”。")]),a._v(" "),v("h4",{attrs:{id:"时间戳-unix-时间戳"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#时间戳-unix-时间戳"}},[a._v("#")]),a._v(" 时间戳/unix 时间戳")]),a._v(" "),v("p",[a._v("是从 1970 年 1 月 1 日（UTC/GMT 的午夜）开始所经过的秒数。")]),a._v(" "),v("p",[a._v("最初计算机操作系统是 32 位，而时间也是用 32 位表示，2147483647。\n换算下来大概是 68 年，实际上到 2038 年 01 月 19 日 03 时 14 分 07 秒，便会到达最大时间。")]),a._v(" "),v("p",[a._v("因为用 32 位来表示时间的最大间隔是 68 年，而最早出现的 UNIX 操作系统考虑到计算机产生的年代和应用的时限综合取了 1970 年 1 月 1 日作为 UNIX TIME 的纪元时间。")]),a._v(" "),v("p",[a._v("但是不用担心，64 位操作系统可以表示到 292,277,026,596 年 12 月 4 日 15 时 30 分 08 秒，哪怕地球毁灭那天都不用愁不够用了。")]),a._v(" "),v("h2",{attrs:{id:"太阳时间"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#太阳时间"}},[a._v("#")]),a._v(" 太阳时间")]),a._v(" "),v("h4",{attrs:{id:"时区"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#时区"}},[a._v("#")]),a._v(" 时区")]),a._v(" "),v("p",[a._v("时区是地理上的一个区域，在该区域遵守同一的标准时间。")]),a._v(" "),v("p",[a._v("地球是自西向东自转的，因此东边会比西边先看到太阳。从经验上讲，太阳升降是一天的时间周期。在这种时间度量方式下，时间就不是一个绝对的概念了。")]),a._v(" "),v("p",[a._v("不同经度地区存在时差，但严格区分实在太不方便了。实际生活中，不需要到分和秒那么精确，1 小时内的误差是可以被接受的。")]),a._v(" "),v("p",[a._v("因此，1884 年在华盛顿召开的国际子午线会议上，规定将全球划分为 24 个时区(东、西各十二个时区)，其中以英国格林尼治天文台旧址作为零时区，每个时区横跨经度 15 度，时间恰好为 1 小时，而东、西第 12 时区各跨经度 7.5 度，以东、西经 180 度为界。每个时区内时间，统一以该时区的中央经线的时间为主，相邻的两个时区间总是相差一个小时，这就是时区的由来。")]),a._v(" "),v("p",[a._v("事实上，时区的划分并不是一个严谨的事情，常见的情况是：一个国家或者一个省份同时跨着 2 个或者更多的时区。\n以中国为例，差不多横跨 5 个时区，理论上在国内应该有 5 个时间，但为了使用起来方便，我们统一用一个时区。\n东八区覆盖了我国的绝大多数人口，且覆盖了我国绝大多数重要城市。因此选取东八区为“中国时间”，又因为北京是我国首都，所以称之为“北京时间”。")]),a._v(" "),v("h4",{attrs:{id:"utc-偏移"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#utc-偏移"}},[a._v("#")]),a._v(" UTC 偏移")]),a._v(" "),v("p",[a._v("UTC 偏移量是协调世界时（UTC）和特定地点的日期与时间差异，其单位为小时和分钟。\n它通常以 ±[hh]:[mm]、±[hh][mm]、或 ±[hh]的格式显示。\nUTC+08:00 是比世界协调时间快 8 小时的时区。")]),a._v(" "),v("h4",{attrs:{id:"gmt"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#gmt"}},[a._v("#")]),a._v(" GMT")]),a._v(" "),v("p",[a._v("Greenwich Mean Time 格林尼治标准时间。这个地方的当地时间过去被当成世界标准的时间。\nGMT 是前世界标准时，UTC 是现世界标准时。UTC 比 GMT 更精准，以原子时计时，适应现代社会的精确计时。但在不需要精确到秒的情况下，二者可以视为等同。\n格林尼治刚好在 0 时区上。")]),a._v(" "),v("p",[a._v("GMT = UTC+0")]),a._v(" "),v("h4",{attrs:{id:"夏令时"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#夏令时"}},[a._v("#")]),a._v(" 夏令时")]),a._v(" "),v("p",[a._v("DST（Daylight Saving Time），夏令时又称夏季时间，或者夏时制。使用夏令时的国家在夏季使用夏令时，标准时间也因此被相应地称为冬季时间。")]),a._v(" "),v("p",[a._v("是为节约能源而人为规定地方时间的制度。一般在天亮早的夏季人为将时间提前一小时，可以使人早起早睡，减少照明量，以充分利用光照资源，从而节约照明用电。")]),a._v(" "),v("p",[a._v("在施行夏令时的国家，一年里面有一天只有 23 小时（夏令时开始那一天），有一天有 25 小时（夏令时结束那一天），其他时间每天都是 24 小时。")]),a._v(" "),v("p",[a._v("从过去的 100 多年来看，夏令时往往是在国家发生严重危机（如战争和能源短缺）的情况下才会受到青睐。而在相对和平的近 10 年里，这种时间制度则变得越来越不受欢迎。它会使得人们的生物钟被扰乱，常常陷入睡眠不足的情况，不仅对人体健康有害、导致车祸，还会对旅游、航空领域造成极大的混乱。\n另外，冬、夏令时究竟能否起到节能的作用，也仍有待商榷。美国一项截至 2014 年 3 月的研究表明，这种时间转换制度最多能在 3、4 月帮助美国减少 1%的用电量，而美国国家标准局则认为，夏令时对用电量没有丝毫影响。\n在俄罗斯，此前的一份报告也显示，夏令时帮助俄罗斯每年节约的电量，仅相当于两三个火力发电厂的发电量，十分的“鸡肋”。")]),a._v(" "),v("h4",{attrs:{id:"本地时间"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#本地时间"}},[a._v("#")]),a._v(" 本地时间")]),a._v(" "),v("p",[a._v("在日常生活中所使用的时间我们通常称之为本地时间。\n这个时间等于我们所在（或者所使用）时区内的当地时间，它由与世界标准时间（UTC）之间的偏移量来定义。\n这个偏移量可以表示为 UTC- 或 UTC+，后面接上偏移的小时和分钟数。")]),a._v(" "),v("h2",{attrs:{id:"时间格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#时间格式"}},[a._v("#")]),a._v(" 时间格式")]),a._v(" "),v("h4",{attrs:{id:"iso-8601"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#iso-8601"}},[a._v("#")]),a._v(" ISO 8601")]),a._v(" "),v("p",[a._v("国际标准 ISO 8601，是国际标准化组织的日期和时间的表示方法。")]),a._v(" "),v("p",[a._v("🌰 1970-01-01T00:00:00Z")]),a._v(" "),v("ul",[v("li",[a._v("年 YYYY")]),a._v(" "),v("li",[a._v("月 MM")]),a._v(" "),v("li",[a._v("日 DD")]),a._v(" "),v("li",[a._v("T 标识为 UTC")]),a._v(" "),v("li",[a._v("Z 标识时区为 0")])]),a._v(" "),v("h4",{attrs:{id:"instant-java"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#instant-java"}},[a._v("#")]),a._v(" instant（Java）")]),a._v(" "),v("p",[a._v("Instant.now()使用等是 UTC 时间")]),a._v(" "),v("p",[a._v("LocalDate、LocalDateTime 的 now()方法使用的是系统默认时区。")]),a._v(" "),v("h4",{attrs:{id:"timestamp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#timestamp"}},[a._v("#")]),a._v(" TIMESTAMP")]),a._v(" "),v("p",[a._v("存储时，MySQL 将 TIMESTAMP 值从当前时区转换为 UTC 时间进行存储，查询时，将数据从 UTC 转换为检索的当前时区。")]),a._v(" "),v("p",[a._v("默认情况下，每个连接的当前时区是服务器的时间。时区可以根据每个连接进行设置。只要时区设置保持不变，就可以得到存储的相同值。")]),a._v(" "),v("p",[a._v("只要写入和读出时的时区设置一致，就能获取到一致的值。")]),a._v(" "),v("h4",{attrs:{id:"数据库连接时的时间转换"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库连接时的时间转换"}},[a._v("#")]),a._v(" 数据库连接时的时间转换")]),a._v(" "),v("p",[a._v("每次创建会话前，先取服务端的时区 STZ 和客户端时区 CTZ(比如 serverTimezone=GMT+8)\n如果 CTZ 没有设置就尝试将 STZ 转换为客户端时区，作为当前会话的时区。")]),a._v(" "),v("p",[a._v("时间类型的处理发生在 SQL 参数绑定阶段，Java 日期时间类型被转换为 SQL 语句(字符串)")])])}),[],!1,null,null,null);t.default=s.exports}}]);