(window.webpackJsonp=window.webpackJsonp||[]).push([[224],{1033:function(e,s,a){"use strict";a.r(s);var n=a(15),r=Object(n.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"使用-jpa-生成策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-jpa-生成策略"}},[e._v("#")]),e._v(" 使用 JPA 生成策略")]),e._v(" "),a("p",[e._v("在实体中使用 @GeneratedValue 即可生成")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Role implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("JPA 标准中默认支持四种策略")]),e._v(" "),a("ul",[a("li",[e._v("TABLE //使用一个额外的数据库表来保存主键")]),e._v(" "),a("li",[e._v("SEQUENCE //使用序列的方式，且其底层数据库要支持序列，一般有postgres、Oracle等")]),e._v(" "),a("li",[e._v("IDENTITY //主键由数据库生成，一般为自增型主键，支持的有MySql和Sql Server")]),e._v(" "),a("li",[e._v("AUTO //由程序来决定主键规则")])]),e._v(" "),a("p",[e._v("如果不指定策略，默认为 AUTO")]),e._v(" "),a("h2",{attrs:{id:"hibernate-内置策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hibernate-内置策略"}},[e._v("#")]),e._v(" Hibernate 内置策略")]),e._v(" "),a("p",[e._v("除了 JPA 标准策略之外 Hibernate 还有很多其他策略。可以在实体类中定义一个生成器。然后再 GeneratedValue 注解中使用即可。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Entity\n@Table(name = "ip_user")\n@GenericGenerator(name = "jpa-uuid", strategy = "uuid")\npublic class User  implements Serializable {\n    @Id\n    @GeneratedValue(generator = "jpa-uuid")\n    @Column(length = 32)\n    private String userId;\n    ...\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("p",[e._v("在 Hibernate 源码中，DefaultIdentifierGeneratorFactory 注册了大量的生成器。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' public DefaultIdentifierGeneratorFactory() {\n        register( "uuid2", UUIDGenerator.class );\n        register( "guid", GUIDGenerator.class );            // can be done with UUIDGenerator + strategy\n        register( "uuid", UUIDHexGenerator.class );         // "deprecated" for new use\n        register( "uuid.hex", UUIDHexGenerator.class );     // uuid.hex is deprecated\n        register( "assigned", Assigned.class );\n        register( "identity", IdentityGenerator.class );\n        register( "select", SelectGenerator.class );\n        register( "sequence", SequenceStyleGenerator.class );\n        register( "seqhilo", SequenceHiLoGenerator.class );\n        register( "increment", IncrementGenerator.class );\n        register( "foreign", ForeignGenerator.class );\n        register( "sequence-identity", SequenceIdentityGenerator.class );\n        register( "enhanced-sequence", SequenceStyleGenerator.class );\n        register( "enhanced-table", TableGenerator.class );\n    }\n\n    public void register(String strategy, Class generatorClass) {\n        LOG.debugf( "Registering IdentifierGenerator strategy [%s] -> [%s]", strategy, generatorClass.getName() );\n        final Class previous = generatorStrategyToClassNameMap.put( strategy, generatorClass );\n        if ( previous != null ) {\n            LOG.debugf( "    - overriding [%s]", previous.getName() );\n        }\n    }\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br")])]),a("p",[e._v("常用的说明")]),e._v(" "),a("h3",{attrs:{id:"uuid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uuid"}},[e._v("#")]),e._v(" uuid")]),e._v(" "),a("p",[e._v("采用 128位的uuid算法生成主键，uuid被编码为一个32位16进制数字的字符串。\n当使用strategy为uuid时，使用的时hibernate自己定义的UUID生成算法，此策略已过时，其具体实现参照org.hibernate.id. UUIDHexGenerator, 生成的字符串如402880876359adeb016359ae27190000\n当使用strategy为uuid2时，此为此版本推荐使用的uuid生成算法，其默认采用标准的生成策略StandardRandomStrategy，实现为使用jdk自带的uuid生成方法，生成的字符串如\n4af17c8e-8317-43e9-aff9-12d5590a71c6")]),e._v(" "),a("h3",{attrs:{id:"assigned"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assigned"}},[e._v("#")]),e._v(" assigned")]),e._v(" "),a("p",[e._v("插入主键时，由程序来指定。相当于JPA中的AUTO。")]),e._v(" "),a("h3",{attrs:{id:"guid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#guid"}},[e._v("#")]),e._v(" guid")]),e._v(" "),a("p",[e._v("采用数据库底层的guid算法机制，对应MYSQL的uuid()函数，SQL Server的newid()函数，ORACLE的rawtohex(sys_guid())函数等")])])}),[],!1,null,null,null);s.default=r.exports}}]);