(window.webpackJsonp=window.webpackJsonp||[]).push([[343],{1165:function(e,s,t){"use strict";t.r(s);var a=t(15),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("官网: https://redis.io/\n基础教程：http://www.runoob.com/redis/redis-java.html")]),e._v(" "),t("h2",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),t("p",[e._v("Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。")]),e._v(" "),t("h2",{attrs:{id:"常用的数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用的数据结构"}},[e._v("#")]),e._v(" 常用的数据结构")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("类型")]),e._v(" "),t("th",[e._v("简介")]),e._v(" "),t("th",[e._v("特性")]),e._v(" "),t("th",[e._v("场景")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("String")]),e._v(" "),t("td",[e._v("二进制安全")]),e._v(" "),t("td",[e._v("可以包含任何数据,比如jpg图片或者序列化的对象,一个键最大能存储512M")]),e._v(" "),t("td",[e._v("---")])]),e._v(" "),t("tr",[t("td",[e._v("Hash")]),e._v(" "),t("td",[e._v("键值对集合,即编程语言中的Map类型")]),e._v(" "),t("td",[e._v("适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)")]),e._v(" "),t("td",[e._v("存储、读取、修改用户属性")])]),e._v(" "),t("tr",[t("td",[e._v("List")]),e._v(" "),t("td",[e._v("链表(双向链表)")]),e._v(" "),t("td",[e._v("增删快,提供了操作某一段元素的API")]),e._v(" "),t("td",[e._v("1,最新消息排行等功能(比如朋友圈的时间线) 2,消息队列")])]),e._v(" "),t("tr",[t("td",[e._v("Set")]),e._v(" "),t("td",[e._v("哈希表实现,元素不重复")]),e._v(" "),t("td",[e._v("1、添加、删除,查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作")]),e._v(" "),t("td",[e._v("1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐")])]),e._v(" "),t("tr",[t("td",[e._v("Sorted Set")]),e._v(" "),t("td",[e._v("将Set中的元素增加一个权重参数score,元素按score有序排列")]),e._v(" "),t("td",[e._v("数据插入集合时,已经进行天然排序")]),e._v(" "),t("td",[e._v("1、排行榜 2、带权重的消息队列")])])])]),e._v(" "),t("h2",{attrs:{id:"cli常用操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cli常用操作"}},[e._v("#")]),e._v(" cli常用操作")]),e._v(" "),t("h3",{attrs:{id:"redis-select-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-select-命令"}},[e._v("#")]),e._v(" Redis Select 命令")]),e._v(" "),t("p",[e._v("Redis 有多个数据库，默认使用 0 链接，如果需要修改到 faff")]),e._v(" "),t("h3",{attrs:{id:"benchmark-性能测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#benchmark-性能测试"}},[e._v("#")]),e._v(" benchmark 性能测试")]),e._v(" "),t("blockquote",[t("p",[e._v("redis-benchmark -n 10000  -q")])]),e._v(" "),t("h2",{attrs:{id:"redis-的事务特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-的事务特性"}},[e._v("#")]),e._v(" redis 的事务特性")]),e._v(" "),t("p",[e._v("Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：")]),e._v(" "),t("ul",[t("li",[e._v("批量操作在发送 EXEC 命令前被放入队列缓存。")]),e._v(" "),t("li",[e._v("收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。\n-在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。")]),e._v(" "),t("li",[e._v("一个事务从开始到执行会经历以下三个阶段：\n"),t("ul",[t("li",[e._v("开始事务。")]),e._v(" "),t("li",[e._v("命令入队。")]),e._v(" "),t("li",[e._v("执行事务。")])])])]),e._v(" "),t("p",[e._v("Redis 事务的本质是一组命令批量执行，并不具备原子能力，也就是说中间失败剩下的还是会被执行，用处是保持时间在一起执行。")]),e._v(" "),t("p",[e._v("单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。")]),e._v(" "),t("p",[e._v("事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。")]),e._v(" "),t("h2",{attrs:{id:"在-cli-外部批量操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在-cli-外部批量操作"}},[e._v("#")]),e._v(" 在 cli 外部批量操作")]),e._v(" "),t("p",[e._v("批量删除 keys")]),e._v(" "),t("blockquote",[t("p",[e._v('redis-cli keys "user*" | xargs redis-cli del')])]),e._v(" "),t("p",[e._v("进入 cli 模式后删除 db")]),e._v(" "),t("blockquote",[t("p",[e._v("flushdb")])]),e._v(" "),t("p",[e._v("进入 cli 模式后删除所有")]),e._v(" "),t("blockquote",[t("p",[e._v("flushall")])]),e._v(" "),t("h2",{attrs:{id:"启动-redis-server"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动-redis-server"}},[e._v("#")]),e._v(" 启动 redis-server")]),e._v(" "),t("blockquote",[t("p",[e._v("redis-server")])]),e._v(" "),t("p",[e._v("后台运行")]),e._v(" "),t("blockquote",[t("p",[e._v("redis-server --daemonize yes")])]),e._v(" "),t("p",[e._v("后台运行也可以修改配置文件实现。")]),e._v(" "),t("h2",{attrs:{id:"redis-redistemplate-key为字符串是多双引号的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-redistemplate-key为字符串是多双引号的问题"}},[e._v("#")]),e._v(" redis redistemplate KEY为字符串是多双引号的问题")]),e._v(" "),t("p",[e._v("原因是 redistemplate 使用json进行序列化，需要对 key value 使用不同的序列化策略。")]),e._v(" "),t("p",[e._v("推荐使用如下配置")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@Configuration\npublic class RedisConfiguration {\n\n    @Bean\n    public GenericJackson2JsonRedisSerializer genericJackson2JsonRedisJsonSerializer() {\n        return new GenericJackson2JsonRedisSerializer();\n    }\n\n    @Bean\n    RedisTemplate<String, Object> redisTemplate(JedisConnectionFactory jedisConnectionFactory) {\n        final RedisTemplate<String, Object> restTemplate = new RedisTemplate<>();\n        restTemplate.setConnectionFactory(jedisConnectionFactory);\n        restTemplate.setKeySerializer(new StringRedisSerializer());\n        restTemplate.setValueSerializer(genericJackson2JsonRedisJsonSerializer());\n        return restTemplate;\n    }\n}\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br")])]),t("p",[e._v("这里定义了 key 和 value 的序列化策略，如果需要使用更多的数据类型，需要添加适当的序列化策略。")])])}),[],!1,null,null,null);s.default=r.exports}}]);