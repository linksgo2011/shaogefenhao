(window.webpackJsonp=window.webpackJsonp||[]).push([[367],{1195:function(s,t,e){"use strict";e.r(t);var a=e(15),r=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("在邮件、消息等场景下需要使用服务器推方案，用于在  web 上和用户实时交互。")]),s._v(" "),e("p",[s._v("一般有几种方案：")]),s._v(" "),e("ol",[e("li",[s._v("HTTP 轮询")]),s._v(" "),e("li",[s._v("HTTP stram 或 polling 技术 （Comet 技术）")]),s._v(" "),e("li",[s._v("Websocket 技术")]),s._v(" "),e("li",[s._v("HTTP/2 Server push 技术")])]),s._v(" "),e("h2",{attrs:{id:"http-轮询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-轮询"}},[s._v("#")]),s._v(" HTTP 轮询")]),s._v(" "),e("p",[s._v("轮询的原理非常简单，让浏览器每隔几秒就向服务器发送一个请求，询问服务器是否有新的信息。")]),s._v(" "),e("p",[s._v("这种方案也是最早期的方案，带来的问题是服务器资源消耗较大。")]),s._v(" "),e("p",[s._v("连接的建立和销毁是比较耗费资源的行为。")]),s._v(" "),e("h2",{attrs:{id:"http-stram-或-polling-技术-comet-技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-stram-或-polling-技术-comet-技术"}},[s._v("#")]),s._v(" HTTP stram 或 polling 技术 （Comet 技术）")]),s._v(" "),e("p",[s._v("Comet 技术和轮询差不多，不过采取的是阻塞模型，方法是客户端发起一个请求后，服务器挂起，等到需要服务器推送数据时返回 http 数据。返回数据后，客户端再次发起请求。")]),s._v(" "),e("p",[s._v("这种技术会造成服务器线程长时间挂起，因此在服务器阻塞网络模型时性能变得非常差，因为这种方案一般没有兼容性的问题，可以在性能和实现成本上是一个比较好的取舍。")]),s._v(" "),e("h2",{attrs:{id:"websocket-技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket-技术"}},[s._v("#")]),s._v(" WebSocket 技术")]),s._v(" "),e("p",[s._v("WebSocket协议（RFC 6455）提供了一种标准化的浏览器、服务器双工通信方法，通过一个TCP连接在客户机和服务器之间建立全双工、双向的通信通道。它是一种不同于 HTTP 的 TCP 协议，但设计用于在 HTTP 上工作，使用端口 80 和 443。因为可以重用端口，可以重用现有的防火墙。")]),s._v(" "),e("p",[s._v("WebSocket交互从一个HTTP请求开始，该请求使用HTTP升级报头进行升级，切换 WebSocket协议。")]),s._v(" "),e("p",[s._v("Websocket 协议只是借用了 HTTP 协议作为协议切换，建立信道后 HTTP 不在有关系。")]),s._v(" "),e("p",[s._v("客户端发起协议切换请求：")]),s._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token request-line"}},[e("span",{pre:!0,attrs:{class:"token method property"}},[s._v("GET")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token request-target url"}},[s._v("/spring-websocket-portfolio/portfolio")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token http-version property"}},[s._v("HTTP/1.1")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[s._v("localhost:8080")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Upgrade")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[s._v("websocket ")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Connection")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[s._v("Upgrade ")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Sec-WebSocket-Key")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[s._v("Uc9l9TMkWGbHFD2qnFHltg==")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Sec-WebSocket-Protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[s._v("v10.stomp, v11.stomp")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Sec-WebSocket-Version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[s._v("13")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Origin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[s._v("http://localhost:8080")])]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("服务器成功切换协议后返回状态码 101 而非 200：")]),s._v(" "),e("div",{staticClass:"language-http line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token response-status"}},[e("span",{pre:!0,attrs:{class:"token http-version property"}},[s._v("HTTP/1.1")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token status-code number"}},[s._v("101")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token reason-phrase string"}},[s._v("Switching Protocols ")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Upgrade")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[s._v("websocket")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Connection")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[s._v("Upgrade")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Sec-WebSocket-Accept")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[s._v("1qVdfYHU9hPOl4JYYNXF623Gzn0=")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token header"}},[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Sec-WebSocket-Protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token header-value"}},[s._v("v10.stomp")])]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"websocket-和-http-协议的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket-和-http-协议的关系"}},[s._v("#")]),s._v(" WebSocket 和 HTTP 协议的关系")]),s._v(" "),e("p",[s._v("尽管 WebSocket 被设计为与 HTTP 兼容，并从 HTTP 请求开始，但重要的是要理解这两个协议导致了非常不同的体系结构和应用程序编程模型。")]),s._v(" "),e("p",[s._v("在HTTP 和 REST 中，应用程序被建模为许多 url 。为了与应用程序交互，客户端访问这些url，请求-响应样式。服务器根据HTTP URL、方法和标头将请求路由到适当的处理程序。")]),s._v(" "),e("p",[s._v("相反，在WebSockets中，初始连接通常只有一个URL。随后，所有应用程序消息都在同一TCP连接上流动。这指向一个完全不同的异步、事件驱动的消息传递体系结构。")]),s._v(" "),e("p",[s._v("WebSocket 实际上是一种传输层协议，与 HTTP 不同，它不对消息的内容规定任何语义。这意味着，除非客户机和服务器在消息语义上达成一致，否则无法路由或处理消息。")]),s._v(" "),e("p",[s._v("WebSocket 客户端和服务器可以通过 HTTP 握手请求上的 "),e("code",[s._v("Sec-WebSocket-Protocol")]),s._v(" 头协商使用更高级别的消息传递协议(例如，STOMP)。在这种情况下，他们需要制定自己的惯例。")]),s._v(" "),e("h3",{attrs:{id:"websocket-和-stomp-协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket-和-stomp-协议"}},[s._v("#")]),s._v(" WebSocket 和 STOMP 协议")]),s._v(" "),e("h3",{attrs:{id:"技术选型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#技术选型"}},[s._v("#")]),s._v(" 技术选型")]),s._v(" "),e("p",[s._v("后端")]),s._v(" "),e("p",[s._v("Java：")]),s._v(" "),e("p",[s._v("SpringBoot")]),s._v(" "),e("p",[s._v("Nodejs")]),s._v(" "),e("p",[s._v("前端：")]),s._v(" "),e("h3",{attrs:{id:"注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[s._v("#")]),s._v(" 注意事项")]),s._v(" "),e("p",[e("strong",[s._v("在合适的场景下使用 WebSocket")])]),s._v(" "),e("p",[s._v("低延迟、高频率和高容量是 WebSocket 特点，如果应用对延迟要求并不高，WebSocket 会带来额外的编程复杂度，并不见得是比轮询更好地方案。")]),s._v(" "),e("p",[e("strong",[s._v("反向代理和运营商网络要求")])]),s._v(" "),e("p",[s._v("如果 WebSocket 服务器运行在 web 服务器(例如nginx)之后，可能需要将其配置为将 WebSocket 升级请求传递给WebSocke t服务器。同样，如果应用程序在云环境中运行，请检查云提供商与 WebSocket 支持相关的说明。")]),s._v(" "),e("div",{staticClass:"language-nginx line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nginx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("server")])]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("listen")]),s._v("   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("server_name")]),s._v(" example.com")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      \n      "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("location")]),s._v(" /")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_pass")]),s._v("   http://127.0.0.1:8080/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n 　　　　"),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_http_version")]),s._v(" 1.1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_read_timeout")]),s._v("   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3600s")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        // 启用支持 "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("websocket")]),s._v(" 连接\n        proxy_set_header Upgrade "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$http_upgrade")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_set_header")]),s._v(" Connection "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"upgrade"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[s._v("需要特别注意的是，Nginx 等反向代理服务器一定要将 "),e("code",[s._v("Upgrade")]),s._v(" 相关的头转发出去，否则无法建立起来连接。这个问题非常难调试。")]),s._v(" "),e("div",{staticClass:"language-nginx line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-nginx"}},[e("code",[s._v("       "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_set_header")]),s._v(" Upgrade "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$http_upgrade")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n       "),e("span",{pre:!0,attrs:{class:"token directive"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("proxy_set_header")]),s._v(" Connection "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"upgrade"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[e("strong",[s._v("wss 和 ws 协议头")])]),s._v(" "),e("p",[s._v("在建立连接时如果使用的 http 协议，则对应发送消息的协议为 ws，如果使用 https 协议建立的链接，则发送消息的协议为 wss。")]),s._v(" "),e("p",[s._v("同时需要注意，wss 还是需要配置相关证书。")]),s._v(" "),e("p",[e("strong",[s._v("跨域")])]),s._v(" "),e("p",[s._v("WebSocket 协议没有同源策略，但是建立连接的 http 请求有同源策略，需要配置跨域访问。")]),s._v(" "),e("h2",{attrs:{id:"http-2-server-push-技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-2-server-push-技术"}},[s._v("#")]),s._v(" HTTP/2 Server push 技术")])])}),[],!1,null,null,null);t.default=r.exports}}]);