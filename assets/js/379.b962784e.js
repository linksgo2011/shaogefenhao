(window.webpackJsonp=window.webpackJsonp||[]).push([[379],{1209:function(n,a,t){"use strict";t.r(a);var i=t(15),o=Object(i.a)({},(function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"常用配置注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用配置注解"}},[n._v("#")]),n._v(" 常用配置注解")]),n._v(" "),t("h3",{attrs:{id:"springbootapplication"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springbootapplication"}},[n._v("#")]),n._v(" @SpringBootApplication")]),n._v(" "),t("p",[n._v("这是 Spring Boot 最最最核心的注解，用在 Spring Boot 主类上，标识这是一个 Spring Boot 应用，用来开启 Spring Boot 的各项能力。")]),n._v(" "),t("p",[n._v("其实这个注解是")]),n._v(" "),t("ul",[t("li",[n._v("@SpringBootConfiguration")]),n._v(" "),t("li",[n._v("@EnableAutoConfiguration")]),n._v(" "),t("li",[n._v("@ComponentScan")])]),n._v(" "),t("p",[n._v("这三个注解的组合，也可以用这三个注解来代替 @SpringBootApplication 注解。")]),n._v(" "),t("h3",{attrs:{id:"enableautoconfiguration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enableautoconfiguration"}},[n._v("#")]),n._v(" @EnableAutoConfiguration")]),n._v(" "),t("p",[n._v("允许 Spring Boot 自动配置注解，开启这个注解之后，Spring Boot 就能根据当前类路径下的包或者类来配置 Spring Bean。")]),n._v(" "),t("p",[n._v("如：当前类路径下有 Mybatis 这个 JAR 包，MybatisAutoConfiguration 注解就能根据相关参数来配置 Mybatis 的各个 Spring Bean。")]),n._v(" "),t("h3",{attrs:{id:"configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[n._v("#")]),n._v(" @Configuration")]),n._v(" "),t("p",[n._v("这是 Spring 3.0 添加的一个注解，用来代替 applicationContext.xml 配置文件，所有这个配置文件里面能做到的事情都可以通过这个注解所在类来进行注册。")]),n._v(" "),t("h3",{attrs:{id:"springbootconfiguration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springbootconfiguration"}},[n._v("#")]),n._v(" @SpringBootConfiguration")]),n._v(" "),t("p",[n._v("这个注解就是 @Configuration 注解的变体，只是用来修饰是 Spring Boot 配置而已，或者可利于 Spring Boot 后续的扩展。")]),n._v(" "),t("h3",{attrs:{id:"componentscan"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#componentscan"}},[n._v("#")]),n._v(" @ComponentScan")]),n._v(" "),t("p",[n._v("这是 Spring 3.1 添加的一个注解，用来代替配置文件中的 component-scan 配置，开启组件扫描，即自动扫描包路径下的 @Component 注解进行注册 bean 实例到 context 中。")]),n._v(" "),t("h3",{attrs:{id:"conditional"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditional"}},[n._v("#")]),n._v(" @Conditional")]),n._v(" "),t("p",[n._v("这是 Spring 4.0 添加的新注解，用来标识一个 Spring Bean 或者 Configuration 配置文件，当满足指定的条件才开启配置。")]),n._v(" "),t("h3",{attrs:{id:"conditionalonbean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonbean"}},[n._v("#")]),n._v(" @ConditionalOnBean")]),n._v(" "),t("p",[n._v("组合 @Conditional 注解，当容器中有指定的 Bean 才开启配置。")]),n._v(" "),t("h3",{attrs:{id:"conditionalonmissingbean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonmissingbean"}},[n._v("#")]),n._v(" @ConditionalOnMissingBean")]),n._v(" "),t("p",[n._v("组合 @Conditional 注解，和 @ConditionalOnBean 注解相反，当容器中没有指定的 Bean 才开启配置。")]),n._v(" "),t("h3",{attrs:{id:"conditionalonclass"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonclass"}},[n._v("#")]),n._v(" @ConditionalOnClass")]),n._v(" "),t("p",[n._v("组合 @Conditional 注解，当容器中有指定的 Class 才开启配置，自动配置中用的非常多。")]),n._v(" "),t("h3",{attrs:{id:"conditionalonmissingclass"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonmissingclass"}},[n._v("#")]),n._v(" @ConditionalOnMissingClass")]),n._v(" "),t("p",[n._v("组合 @Conditional 注解，和 @ConditionalOnMissingClass 注解相反，当容器中没有指定的 Class 才开启配置。")]),n._v(" "),t("h3",{attrs:{id:"conditionalonwebapplication"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonwebapplication"}},[n._v("#")]),n._v(" @ConditionalOnWebApplication")]),n._v(" "),t("p",[n._v("组合 @Conditional 注解，当前项目类型是 WEB 项目才开启配置。")]),n._v(" "),t("p",[n._v("当前项目有以下 3 种类型。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("enum Type {\n\n/**\n * Any web application will match.\n */\nANY,\n/**\n * Only servlet-based web application will match.\n */\nSERVLET,\n/**\n * Only reactive-based web application will match.\n */\nREACTIVE\n\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br")])]),t("h3",{attrs:{id:"conditionalonnotwebapplication"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonnotwebapplication"}},[n._v("#")]),n._v(" @ConditionalOnNotWebApplication")]),n._v(" "),t("p",[n._v("组合 @Conditional 注解，和 @ConditionalOnWebApplication 注解相反，当前项目类型不是 WEB 项目才开启配置。")]),n._v(" "),t("h3",{attrs:{id:"conditionalonproperty"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonproperty"}},[n._v("#")]),n._v(" @ConditionalOnProperty")]),n._v(" "),t("p",[n._v("组合 @Conditional 注解，当指定的属性有指定的值时才开启配置。")]),n._v(" "),t("h3",{attrs:{id:"conditionalonexpression"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonexpression"}},[n._v("#")]),n._v(" @ConditionalOnExpression")]),n._v(" "),t("p",[n._v("组合 @Conditional 注解，当 SpEL 表达式为 true 时才开启配置。")]),n._v(" "),t("h3",{attrs:{id:"conditionalonjava"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonjava"}},[n._v("#")]),n._v(" @ConditionalOnJava")]),n._v(" "),t("p",[n._v("组合 @Conditional 注解，当运行的 Java JVM 在指定的版本范围时才开启配置。")]),n._v(" "),t("h3",{attrs:{id:"conditionalonresource"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonresource"}},[n._v("#")]),n._v(" @ConditionalOnResource")]),n._v(" "),t("p",[n._v("组合 @Conditional 注解，当类路径下有指定的资源才开启配置。")]),n._v(" "),t("h3",{attrs:{id:"conditionalonjndi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonjndi"}},[n._v("#")]),n._v(" @ConditionalOnJndi")]),n._v(" "),t("p",[n._v("组合 @Conditional 注解，当指定的 JNDI 存在时才开启配置, JNDI 现在用的不多。")]),n._v(" "),t("h3",{attrs:{id:"conditionaloncloudplatform"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionaloncloudplatform"}},[n._v("#")]),n._v(" @ConditionalOnCloudPlatform")]),n._v(" "),t("p",[n._v("组合 @Conditional 注解，当指定的云平台激活时才开启配置。")]),n._v(" "),t("h3",{attrs:{id:"conditionalonsinglecandidate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditionalonsinglecandidate"}},[n._v("#")]),n._v(" @ConditionalOnSingleCandidate")]),n._v(" "),t("p",[n._v("组合 @Conditional 注解，当指定的 class 在容器中只有一个 Bean，或者同时有多个但为首选时才开启配置。")]),n._v(" "),t("h3",{attrs:{id:"configurationproperties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configurationproperties"}},[n._v("#")]),n._v(" @ConfigurationProperties")]),n._v(" "),t("p",[n._v("用来加载额外的配置（如 .properties 文件），可用在 @Configuration 注解类，或者 @Bean 注解方法上面。")]),n._v(" "),t("h3",{attrs:{id:"enableconfigurationproperties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enableconfigurationproperties"}},[n._v("#")]),n._v(" @EnableConfigurationProperties")]),n._v(" "),t("p",[n._v("一般要配合 @ConfigurationProperties 注解使用，用来开启对 @ConfigurationProperties 注解配置 Bean 的支持。")]),n._v(" "),t("h3",{attrs:{id:"autoconfigureafter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#autoconfigureafter"}},[n._v("#")]),n._v(" @AutoConfigureAfter")]),n._v(" "),t("p",[n._v("用在自动配置类上面，表示该自动配置类需要在另外指定的自动配置类配置完之后。")]),n._v(" "),t("p",[n._v("如 Mybatis 的自动配置类，需要在数据源自动配置类之后。")]),n._v(" "),t("p",[n._v("@AutoConfigureAfter(DataSourceAutoConfiguration.class) public class MybatisAutoConfiguration { 23、@AutoConfigureBefore")]),n._v(" "),t("p",[n._v("这个和 @AutoConfigureAfter 注解使用相反，表示该自动配置类需要在另外指定的自动配置类配置之前。")]),n._v(" "),t("h3",{attrs:{id:"import"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#import"}},[n._v("#")]),n._v(" @Import")]),n._v(" "),t("p",[n._v("这是 Spring 3.0 添加的新注解，用来导入一个或者多个 @Configuration 注解修饰的类，这在 Spring Boot 里面应用很多。")]),n._v(" "),t("h3",{attrs:{id:"importresource"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#importresource"}},[n._v("#")]),n._v(" @ImportResource")]),n._v(" "),t("p",[n._v("这是 Spring 3.0 添加的新注解，用来导入一个或者多个 Spring 配置文件，这对 Spring Boot 兼容老项目非常有用，因为有些配置无法通过 Java Config 的形式来配置就只能用这个注解来导入。")]),n._v(" "),t("h2",{attrs:{id:"springmvc-注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-注解"}},[n._v("#")]),n._v(" SpringMVC 注解")])])}),[],!1,null,null,null);a.default=o.exports}}]);