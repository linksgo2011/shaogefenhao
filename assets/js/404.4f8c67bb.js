(window.webpackJsonp=window.webpackJsonp||[]).push([[404],{1239:function(t,n,s){"use strict";s.r(n);var a=s(15),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"背景介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背景介绍"}},[t._v("#")]),t._v(" 背景介绍")]),t._v(" "),s("p",[t._v("当我们在谈论某个 Java 语法特性的性能，或者一段业务代码的性能时，往往是凭经验或者写一个简单的循环来测试其是效果。实际上 JVM 的开发者们，已经有一个非常好的工具来做方法层面的基准测试（相对于 ab 测试和 jmeter）。")]),t._v(" "),s("p",[t._v("JMH 是一个用于构建、运行和分析 Java 方法运行性能工具，可以做到 nano/micro/mili/macro 时间粒度。JMH 不仅可以分析 Java 语言，基于 JVM 的语言都可以使用。")]),t._v(" "),s("p",[t._v("OpenJdk 官方运行 JMH 测试推的方法是使用 Maven 构建一个单独的项目，然后把需要测试的项目作为 Jar 包引入。这样能排除项目代码的干扰，得到比较可靠地测试效果。当然也可以使用 IDE 或者 Gradle 配置到自己项目中，便于和已有项目集成，代价是配置比较麻烦并且结果没那么可靠。")]),t._v(" "),s("h2",{attrs:{id:"使用-maven-构建基准测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-maven-构建基准测试"}},[t._v("#")]),t._v(" 使用 Maven 构建基准测试")]),t._v(" "),s("p",[t._v("根据官网的例子，我们可以使用官网的一个模板项目。")]),t._v(" "),s("blockquote",[s("p",[t._v("mvn archetype:generate "),s("br"),t._v("\n-DinteractiveMode=false "),s("br"),t._v("\n-DarchetypeGroupId=org.openjdk.jmh "),s("br"),t._v("\n-DarchetypeArtifactId=jmh-java-benchmark-archetype "),s("br"),t._v("\n-DgroupId=org.sample "),s("br"),t._v("\n-DartifactId=test "),s("br"),t._v("\n-Dversion=1.0")])]),t._v(" "),s("p",[t._v("创建一个项目，导入 IDE，Maven 会帮我们生成一个测试类，但是这个测试类没有任何内容，这个测试也是可以运行的。")]),t._v(" "),s("p",[t._v("先编译成 jar")]),t._v(" "),s("blockquote",[s("p",[t._v("mvn clean install")])]),t._v(" "),s("p",[t._v("然后使用 javar -jar 来运行测试")]),t._v(" "),s("blockquote",[s("p",[t._v("java -jar target/benchmarks.jar")])]),t._v(" "),s("p",[t._v("运行后可以看到输出信息中包含 JDK、JVM 等信息，以及一些用于测试的配置信息。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# JMH version: 1.22\n# VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13\n# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/bin/java\n# VM options: <none>\n# Warmup: 5 iterations, 10 s each\n# Measurement: 5 iterations, 10 s each\n# Timeout: 10 min per iteration\n# Threads: 1 thread, will synchronize iterations\n# Benchmark mode: Throughput, ops/time\n# Benchmark: org.sample.MyBenchmark.testSimpleString\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("下面是一些配置信息说明")]),t._v(" "),s("ul",[s("li",[t._v("Warmup 因为 JVM 即时编译的存在，所以为了更加准确有一个预热环节，这里是预热  5，每轮 10s。")]),t._v(" "),s("li",[t._v("Measurement 是真实的性能测量参数，这里是 5轮，每轮10s。")]),t._v(" "),s("li",[t._v("Timeout 每轮测试，JMH 会进行 GC 然后暂停一段时间，默认是 10 分钟。")]),t._v(" "),s("li",[t._v("Threads 使用多少个线程来运行，一个线程会同步阻塞执行。")]),t._v(" "),s("li",[t._v("Benchmark mode 输出的运行模式，常用的有下面几个。\n"),s("ul",[s("li",[t._v("Throughput 吞吐量，即每单位运行多少次操作。")]),t._v(" "),s("li",[t._v("AverageTime 调用的平均时间，每次调用耗费多少时间。")]),t._v(" "),s("li",[t._v("SingleShotTime 运行一次的时间，如果把预热关闭可以测试代码冷启动时间")])])]),t._v(" "),s("li",[t._v("Benchmark 测试的目标类")])]),t._v(" "),s("p",[t._v("实际上还有很多配置，可以通过 -h 参数查看")]),t._v(" "),s("blockquote",[s("p",[t._v("java -jar target/benchmarks.jar -h")])]),t._v(" "),s("p",[t._v("由于默认的配置停顿的时间太长，我们通过注解修改配置，并增加了 Java 中最基本的字符串操作性能对比。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('@BenchmarkMode(Mode.Throughput)\n@Warmup(iterations = 3)\n@Measurement(iterations = 5, time = 5, timeUnit = TimeUnit.SECONDS)\n@Threads(8)\n@Fork(1)\n@OutputTimeUnit(TimeUnit.MILLISECONDS)\npublic class MyBenchmark {\n\n    @Benchmark\n    public void testSimpleString() {\n        String s = "Hello world!";\n        for (int i = 0; i < 10; i++) {\n            s += s;\n        }\n    }\n\n    @Benchmark\n    public void testStringBuilder() {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < 10; i++) {\n            sb.append(i);\n        }\n    }\n}\n\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br")])]),s("p",[t._v("在控制台可以看到输出的测试报告，我们直接看最后一部分即可。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Benchmark                       Mode  Cnt      Score      Error   Units\nMyBenchmark.testSimpleString   thrpt   10    226.930 ±   16.621  ops/ms\nMyBenchmark.testStringBuilder  thrpt   10  80369.037 ± 3058.280  ops/ms\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("Score 这列的意思是每毫秒完成了多少次操作，可见 StringBuilder 确实比普通的 String 构造器性能高很多。")]),t._v(" "),s("h2",{attrs:{id:"更多有趣的测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更多有趣的测试"}},[t._v("#")]),t._v(" 更多有趣的测试")]),t._v(" "),s("p",[t._v("实际上平时 Java 开发中一些细节对性能有明显的影响，虽然对系统整体来说影响比较小，但是注意这些细节可以低成本的避免性能问题堆积。")]),t._v(" "),s("p",[t._v("其中一个非常有意思细节是自动包装类型的使用，即使是一个简单的 for 循环，如果不小心讲 int 使用成 Integer 也会造成性能浪费。")]),t._v(" "),s("p",[t._v("我们来编写一个简单的基准测试")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("@Benchmark\n    public void primaryDataType() {\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            sum += i;\n        }\n    }\n\n    @Benchmark\n    public void boxDataType() {\n        int sum = 0;\n        for (Integer i = 0; i < 10; i++) {\n            sum += i;\n        }\n    }\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("运行测试后，得到下面的测试结果")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("AutoBoxBenchmark.boxDataType       thrpt    5   312779.633 ±   26761.457  ops/ms\nAutoBoxBenchmark.primaryDataType   thrpt    5  8522641.543 ± 2500518.440  ops/ms\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("基本类型的性能高出了一个数量级。当然你可能会说基本类型这种性能问题比较微笑，但是性能往往就是这种从细微处提高的。另外编写 JMH 测试也会让团队看待性能问题更为直观。")]),t._v(" "),s("h2",{attrs:{id:"一份直观的-java-基础性能报告"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一份直观的-java-基础性能报告"}},[t._v("#")]),t._v(" 一份直观的 Java 基础性能报告")]),t._v(" "),s("p",[t._v("下面是我写的常见场景的性能测试，例如 StringBuilder 比 new String() 速度快几个数量级。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Test")]),t._v(" "),s("th",[t._v("Mode")]),t._v(" "),s("th",[t._v("OPS")]),t._v(" "),s("th",[t._v("Unit")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v('"cn.printf.jmhreports.AutoBoxBenchmark.boxDataType"')]),t._v(" "),s("td",[t._v('"thrpt"')]),t._v(" "),s("td",[t._v("323693300.862712")]),t._v(" "),s("td",[t._v("ops/s")])]),t._v(" "),s("tr",[s("td",[t._v('"cn.printf.jmhreports.AutoBoxBenchmark.primaryDataType"')]),t._v(" "),s("td",[t._v('"thrpt"')]),t._v(" "),s("td",[t._v("9421830157.195677")]),t._v(" "),s("td",[t._v("ops/s")])]),t._v(" "),s("tr",[s("td",[t._v('"cn.printf.jmhreports.CacheValueBenchmark.test"')]),t._v(" "),s("td",[t._v('"thrpt"')]),t._v(" "),s("td",[t._v("204814.611974")]),t._v(" "),s("td",[t._v("ops/s")])]),t._v(" "),s("tr",[s("td",[t._v('"cn.printf.jmhreports.CacheValueBenchmark.testStringBuilder"')]),t._v(" "),s("td",[t._v('"thrpt"')]),t._v(" "),s("td",[t._v("80039810.903665")]),t._v(" "),s("td",[t._v("ops/s")])]),t._v(" "),s("tr",[s("td",[t._v('"cn.printf.jmhreports.StringBenchmark.constructStringByAssignment"')]),t._v(" "),s("td",[t._v('"thrpt"')]),t._v(" "),s("td",[t._v("197815.644537")]),t._v(" "),s("td",[t._v("ops/s")])]),t._v(" "),s("tr",[s("td",[t._v('"cn.printf.jmhreports.StringBenchmark.constructStringByConstructor"')]),t._v(" "),s("td",[t._v('"thrpt"')]),t._v(" "),s("td",[t._v("205494.677150")]),t._v(" "),s("td",[t._v("ops/s")])]),t._v(" "),s("tr",[s("td",[t._v('"cn.printf.jmhreports.StringBenchmark.constructStringByStringBuilder"')]),t._v(" "),s("td",[t._v('"thrpt"')]),t._v(" "),s("td",[t._v("66162972.690813")]),t._v(" "),s("td",[t._v("ops/s")])])])]),t._v(" "),s("p",[t._v("代码仓库和持续更新的基准测试可以看下面的仓库。")]),t._v(" "),s("p",[t._v("https://github.com/linksgo2011/jmh-reports")]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[t._v("http://openjdk.java.net/projects/code-tools/jmh/")]),t._v(" "),s("li",[t._v("https://github.com/melix/jmh-gradle-plugin")])])])}),[],!1,null,null,null);n.default=e.exports}}]);