(window.webpackJsonp=window.webpackJsonp||[]).push([[408],{1243:function(t,a,e){"use strict";e.r(a);var r=e(15),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("一个项目需要做多少测试，做到什么程度，这属于测试策略的范畴。")]),t._v(" "),e("h2",{attrs:{id:"分层测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分层测试"}},[t._v("#")]),t._v(" 分层测试")]),t._v(" "),e("ul",[e("li",[t._v("API 层使用 MockMVC 进行简单的测试，目的是快速验证，mock 掉 Service\n"),e("ul",[e("li",[t._v("测试的目标是返回的状态码等等信息")])])]),t._v(" "),e("li",[t._v("Service 层结合 Repository 测试，测试业务逻辑，结合 DataFixture 来进行测试，这是测试重心之一")]),t._v(" "),e("li",[t._v("Domain 测试使用纯的单元测试，测试业务逻辑, domain 保持干净可以不使用 Mock 工具,这也是测试重心")]),t._v(" "),e("li",[t._v("Repository 有 ORM 实现，在 Service 处做测试")])]),t._v(" "),e("h2",{attrs:{id:"测试块描述风格"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试块描述风格"}},[t._v("#")]),t._v(" 测试块描述风格")]),t._v(" "),e("p",[t._v("使用驼峰描述单元测试, 必须满足 it should xxx [when xxx] 格式")]),t._v(" "),e("p",[t._v("例如")]),t._v(" "),e("blockquote",[e("p",[t._v("it should return user list")])]),t._v(" "),e("h2",{attrs:{id:"数据准备"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据准备"}},[t._v("#")]),t._v(" 数据准备")]),t._v(" "),e("p",[t._v("DataFixture 以实体为单位准备")]),t._v(" "),e("h2",{attrs:{id:"集成测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集成测试"}},[t._v("#")]),t._v(" 集成测试")]),t._v(" "),e("p",[t._v("只做 API 测试，使用 user journey 测试方法，覆盖所有场景，本质上是一种集成测试方法。")]),t._v(" "),e("p",[t._v("断言各司其职，例如创建用户的测试需要断言创建后的信息，但是编辑的时候直接使用创建用户的场景，但不对用户创建再次断言。")]),t._v(" "),e("p",[t._v("集成测试只负责 Happy Path 测试")])])}),[],!1,null,null,null);a.default=v.exports}}]);