(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{601:function(v,_,t){v.exports=t.p+"assets/img/image-20201210223755105.ae64603c.png"},602:function(v,_,t){v.exports=t.p+"assets/img/image-20201211070443155.4a66cdb8.png"},603:function(v,_,t){v.exports=t.p+"assets/img/image-20201211072747695.114834dc.png"},948:function(v,_,t){"use strict";t.r(_);var a=t(15),i=Object(a.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h2",{attrs:{id:"linux-架构介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-架构介绍"}},[v._v("#")]),v._v(" linux 架构介绍")]),v._v(" "),a("h2",{attrs:{id:"gcc-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gcc-介绍"}},[v._v("#")]),v._v(" GCC 介绍")]),v._v(" "),a("h3",{attrs:{id:"gcc-介绍-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gcc-介绍-2"}},[v._v("#")]),v._v(" GCC 介绍")]),v._v(" "),a("p",[v._v("GCC 是 GUN 下的一个项目，是一个多语言自由编译器，可以支持 C、C++、Ada 等语言。")]),v._v(" "),a("p",[v._v("包括：")]),v._v(" "),a("ul",[a("li",[v._v("CPP 预处理器")]),v._v(" "),a("li",[v._v("GCC 编译器")]),v._v(" "),a("li",[v._v("binutils\n"),a("ul",[a("li",[v._v("as 汇编器")]),v._v(" "),a("li",[v._v("Id 链接器")])])])]),v._v(" "),a("p",[v._v("GCC 的编译过程")]),v._v(" "),a("ol",[a("li",[v._v("源文件")]),v._v(" "),a("li",[v._v("预处理")]),v._v(" "),a("li",[v._v("编译")]),v._v(" "),a("li",[v._v("汇编")]),v._v(" "),a("li",[v._v("链接")]),v._v(" "),a("li",[v._v("可执行文件")])]),v._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"c++-linux/image-20201210221014691.png",alt:"image-20201210221014691"}}),v._v(" "),a("p",[v._v("GCC 的使用方法")]),v._v(" "),a("blockquote",[a("p",[v._v("gcc [选项] <文件名>")])]),v._v(" "),a("p",[v._v("GCC 默认包含了预处理、编译、汇编、链接四个阶段。")]),v._v(" "),a("p",[v._v("生成应用程序有两种编译方法：")]),v._v(" "),a("ul",[a("li",[v._v("静态编译")]),v._v(" "),a("li",[v._v("动态编译，动态库必须按照 lib*.so 命名规则")])]),v._v(" "),a("h3",{attrs:{id:"gdb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gdb"}},[v._v("#")]),v._v(" GDB")]),v._v(" "),a("p",[v._v("GDB 是 GUN 计划中程序调试工具。")]),v._v(" "),a("p",[v._v("有如下功能：")]),v._v(" "),a("ol",[a("li",[v._v("启动程序，按照不同的方式启动程序")]),v._v(" "),a("li",[v._v("在符合条件的位置进行断点")]),v._v(" "),a("li",[v._v("当程序被停住时，可以检查程序中发生的问题")]),v._v(" "),a("li",[v._v("动态改变程序的执行环境")])]),v._v(" "),a("p",[v._v("使用方法")]),v._v(" "),a("ul",[a("li",[v._v("使用 shell 运行，进入 gdb 界面后，用 file program 装载")]),v._v(" "),a("li",[v._v("在 shell 中直接使用 gdb 启动")]),v._v(" "),a("li",[v._v("使用 gdb 调试 core 文件")]),v._v(" "),a("li",[v._v("调试正在运行中的进程\n"),a("ul",[a("li",[v._v("gdb program "),a("processid")],1)])])]),v._v(" "),a("h2",{attrs:{id:"linux-文件系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-文件系统"}},[v._v("#")]),v._v(" linux 文件系统")]),v._v(" "),a("p",[v._v("在linux中一切都是文件，简化系统的读写操作。")]),v._v(" "),a("p",[v._v("允许多种不同的文件系统。")]),v._v(" "),a("ul",[a("li",[v._v("ext2")]),v._v(" "),a("li",[v._v("ext3")]),v._v(" "),a("li",[v._v("ext4")]),v._v(" "),a("li",[v._v("xfs")]),v._v(" "),a("li",[v._v("btrfs")])]),v._v(" "),a("h3",{attrs:{id:"vfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vfs"}},[v._v("#")]),v._v(" VFS")]),v._v(" "),a("p",[v._v("虚拟文件系统，用于给用户层提供统一的文件访问系统。")]),v._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:t(601),alt:"image-20201210223755105"}}),v._v(" "),a("p",[v._v("用户层不需要关心文件系统的类型和细节。")]),v._v(" "),a("p",[v._v("文件系统的基本数据类型：")]),v._v(" "),a("ul",[a("li",[v._v("超级块（super block）用于存储文件系统的控制信息，包括文件系统的状态、类型、大小、索引节点数")]),v._v(" "),a("li",[v._v("索引节点（inode）。用于存储文件的元数据，包括文件的大小、拥有者、创建时间。")]),v._v(" "),a("li",[v._v("目录项（dentry）。目录用来容纳文件，目录可以包含子目录。")]),v._v(" "),a("li",[v._v("文件对象（file）。一组在逻辑上具有完整意义的信息项的序列。")])]),v._v(" "),a("h3",{attrs:{id:"系统调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统调用"}},[v._v("#")]),v._v(" 系统调用")]),v._v(" "),a("p",[v._v("系操作系统提供给用户程序调用的一组特殊的接口，用户程序通过这组特殊的接口直接访问内核空间。")]),v._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:t(602),alt:"image-20201211070443155"}}),v._v(" "),a("p",[v._v("linux 的内核和用户空间是相互隔离的。可以通过标准 C 函数调用可以调用 linux 中 libc 的函数库。")]),v._v(" "),a("h3",{attrs:{id:"读写文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读写文件"}},[v._v("#")]),v._v(" 读写文件")]),v._v(" "),a("p",[v._v("函数 read() 用于读取文件。write() 用于写入文件。")]),v._v(" "),a("p",[v._v("定位文件是通过文件描述符来完成的，除了通过路径读写文件外有几个特殊的文件描述符：")]),v._v(" "),a("ul",[a("li",[v._v("STDIN_FILENO 标准输入")]),v._v(" "),a("li",[v._v("STDOUT_FILENO 标准输出")]),v._v(" "),a("li",[v._v("errno 错误代码")])]),v._v(" "),a("p",[v._v("标准输入、输出可以用于从键盘读入数据，并从屏幕打印出来。")]),v._v(" "),a("h3",{attrs:{id:"设备-i-o-通道控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设备-i-o-通道控制"}},[v._v("#")]),v._v(" 设备 I/O 通道控制")]),v._v(" "),a("p",[v._v("函数 ioctl 可以控制一些设备文件来操作设备。")]),v._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:t(603),alt:"image-20201211072747695"}}),v._v(" "),a("h3",{attrs:{id:"linux-标准-io-库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-标准-io-库"}},[v._v("#")]),v._v(" linux 标准 IO 库")]),v._v(" "),a("p",[v._v("使用 C 函数，操作比较繁琐，标准 IO 库更加简单。")]),v._v(" "),a("ul",[a("li",[v._v("fopen 打开文件")]),v._v(" "),a("li",[v._v("setbuf setvbuf 设置标准库缓冲区大小")]),v._v(" "),a("li",[v._v("fdopen 使用描述符打开打开文件，比如一些网络描述符")]),v._v(" "),a("li",[v._v("lseek 移动文件位置")]),v._v(" "),a("li",[v._v("pread 读取偏移量的文件数据，是lseek 和 read 的原子操作")])]),v._v(" "),a("h3",{attrs:{id:"父子进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#父子进程"}},[v._v("#")]),v._v(" 父子进程")]),v._v(" "),a("p",[v._v("当一个进程调用 fork 函数后，会创建一个完整的新的进程，系统会将原来的数据复制到新的进程中，新的进程为该进程的子进程。")]),v._v(" "),a("h3",{attrs:{id:"线程和进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程和进程"}},[v._v("#")]),v._v(" 线程和进程")]),v._v(" "),a("ul",[a("li",[v._v("进程为系统资源隔离较大的级别（文件资源、内存、CPU 隔离）")]),v._v(" "),a("li",[v._v("线程，轻量级进程，共享文件资源、内存，CPU 隔离")])]),v._v(" "),a("p",[v._v("进程之间需要共享数据需要使用 sendmsg、receiveMsg 城传送数据和内存交换。")]),v._v(" "),a("p",[v._v("也可以使用 socket 的方式进行共享。")])])}),[],!1,null,null,null);_.default=i.exports}}]);