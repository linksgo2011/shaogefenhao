(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{1214:function(a,e,s){"use strict";s.r(e);var n=s(15),t=Object(n.a)({},(function(){var a=this,e=a.$createElement,n=a._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"spring、spring-data-和-spring-data-jpa-的关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring、spring-data-和-spring-data-jpa-的关系"}},[a._v("#")]),a._v(" Spring、Spring data 和 Spring data JPA 的关系")]),a._v(" "),n("p",[a._v("Spring data JPA 是 Java 服务器开发中最容易混淆的一堆概念。")]),a._v(" "),n("ul",[n("li",[a._v("Spring，众所周知是一个轻量级的 IOC 容器，用来处理对象实例（Bean）之间的关系。")]),a._v(" "),n("li",[a._v("Spring data，是 Spring Framework 生态下用来访问数据的一个模块。")]),a._v(" "),n("li",[a._v("JPA，是 Java persistence API 的缩写，Java 用来抽象访问数据库的规范，主要实现有 Hibernate、TopLink 等 ORM 库。")]),a._v(" "),n("li",[a._v("Spirng data JPA，是 Spring data 项目的一个主要模块，用来封装 JPA 实现，并增加了一些便利的方法。如果直接使用 Hibernate 还是需要编写类似于 SQL 的 JPQL 的查询语言。但使用 Spring data JPA 可以实现类似 "),n("code",[a._v("findById()")]),a._v(" 一类基本操作的方法。")])]),a._v(" "),n("p",[a._v("Spring Data 的一些属于版本火车的子项目：")]),a._v(" "),n("ul",[n("li",[a._v("Spring Data Commons")]),a._v(" "),n("li",[a._v("Spring Data JPA")]),a._v(" "),n("li",[a._v("Spring Data KeyValue")]),a._v(" "),n("li",[a._v("Spring Data LDAP")]),a._v(" "),n("li",[a._v("Spring Data MongoDB")]),a._v(" "),n("li",[a._v("Spring Data Redis")]),a._v(" "),n("li",[a._v("Spring Data REST")]),a._v(" "),n("li",[a._v("Spring Data for Apache Cassandra")]),a._v(" "),n("li",[a._v("Spring Data for Apache Geode")]),a._v(" "),n("li",[a._v("Spring Data for Apache Solr")]),a._v(" "),n("li",[a._v("Spring Data for Pivotal GemFire")]),a._v(" "),n("li",[a._v("Spring Data Couchbase (community module)")]),a._v(" "),n("li",[a._v("Spring Data Elasticsearch (community module)")]),a._v(" "),n("li",[a._v("Spring Data Neo4j (community module)")])]),a._v(" "),n("p",[a._v("版本火车指的是，不同的独立子项目会保持同步的发布节奏，如果使用 Spring boot，也会随着 parent pom 变化，避免版本不一致导致的问题。")]),a._v(" "),n("h2",{attrs:{id:"spring-data-jpa-主要特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-jpa-主要特性"}},[a._v("#")]),a._v(" Spring Data JPA 主要特性")]),a._v(" "),n("ul",[n("li",[a._v("辅助查询 "),n("code",[a._v("findByxx")])]),a._v(" "),n("li",[a._v("支持使用 Querydsl 复杂统一的查询方法")]),a._v(" "),n("li",[a._v("分页、排序")]),a._v(" "),n("li",[a._v("启动时检查 "),n("code",[a._v("@Query")]),a._v(" 有效性")])]),a._v(" "),n("h2",{attrs:{id:"spring-data-jpa-的主要类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-jpa-的主要类"}},[a._v("#")]),a._v(" Spring Data JPA 的主要类")]),a._v(" "),n("p",[a._v("从 SimpleJpaRepository 的实现开，使用 idea 分析出类图。")]),a._v(" "),n("p",[n("img",{attrs:{src:s(749),alt:"SimpleJpaRepository"}})]),a._v(" "),n("ul",[n("li",[a._v("EntityManagerFactory EntityManager 的工厂类")]),a._v(" "),n("li",[a._v("EntityManager 一个接口，管理持久化操作的对象")]),a._v(" "),n("li",[a._v("Entity 实体是持久性对象，对应存储在数据库中的记录")]),a._v(" "),n("li",[a._v("EntityTransaction 和 EntityManager 是一对一关系，提供事务支持")]),a._v(" "),n("li",[a._v("Persistence 包含静态方法，获取 EntityManagerFactory 实例")]),a._v(" "),n("li",[a._v("Query 该接口由每个 JPA 供应商提供，用于数据查询")])]),a._v(" "),n("h2",{attrs:{id:"快速入门教程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速入门教程"}},[a._v("#")]),a._v(" 快速入门教程")]),a._v(" "),n("p",[a._v("https://spring.io/guides/gs/accessing-data-jpa/")]),a._v(" "),n("h2",{attrs:{id:"常见的查询方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见的查询方法"}},[a._v("#")]),a._v(" 常见的查询方法")]),a._v(" "),n("p",[a._v("查询方法策略就是Spring Data如何从 repository 中找到合适的查询方法。有一下几种")]),a._v(" "),n("ul",[n("li",[a._v("CREATE 尝试从查询方法名称构造特定于仓库的查询。例如 findByName，根据约定有以下几种查询方式：\n"),n("ul",[n("li",[a._v("find…By")]),a._v(" "),n("li",[a._v("read…By")]),a._v(" "),n("li",[a._v("query…By")]),a._v(" "),n("li",[a._v("count…By")]),a._v(" "),n("li",[a._v("get…By")])])]),a._v(" "),n("li",[a._v("USE_DECLARED_QUERY 会从 repository 中定义的方法中寻找合适的查询方式")]),a._v(" "),n("li",[a._v("CREATE_IF_NOT_FOUND 这是 JPA 默认的策略，组合CREATE和USE_DECLARED_QUERY")])]),a._v(" "),n("p",[a._v("CREATE 策略的几个例子：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("interface PersonRepository extends Repository<User, Long> {\n\n  List<Person> findByEmailAddressAndLastname(EmailAddress emailAddress, String lastname);\n\n  // Enables the distinct flag for the query\n  List<Person> findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname);\n  List<Person> findPeopleDistinctByLastnameOrFirstname(String lastname, String firstname);\n\n  // Enabling ignoring case for an individual property\n  List<Person> findByLastnameIgnoreCase(String lastname);\n  // Enabling ignoring case for all suitable properties\n  List<Person> findByLastnameAndFirstnameAllIgnoreCase(String lastname, String firstname);\n\n  // Enabling static ORDER BY for a query\n  List<Person> findByLastnameOrderByFirstnameAsc(String lastname);\n  List<Person> findByLastnameOrderByFirstnameDesc(String lastname);\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br")])]),n("ul",[n("li",[n("p",[a._v("表达式通常是属性遍历和可以连接的运算符。您可以使用组合属性表达式AND和OR。您还可以得到这样的运营商为支撑Between，LessThan，GreaterThan，和Like该属性的表达式。受支持的操作员可能因数据存储而异，因此请参阅相应部分的参考文档。")])]),a._v(" "),n("li",[n("p",[a._v("方法解析器支持IgnoreCase为单个属性（例如，findByLastnameIgnoreCase(…)）或支持忽略大小写的类型的所有属性（通常为String实例 - 例如findByLastnameAndFirstnameAllIgnoreCase(…)）设置标志。支持忽略情况的方式可能因商店而异，因此请参阅参考文档中的相关部分以获取特定于商店的查询方法。")])]),a._v(" "),n("li",[n("p",[a._v("您可以通过OrderBy向引用属性的查询方法附加子句并提供排序方向（Asc或Desc）来应用静态排序。")])])]),a._v(" "),n("p",[a._v("分页的情况")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Page<User> findByLastname(String lastname, Pageable pageable);\n\nSlice<User> findByLastname(String lastname, Pageable pageable);\n\nList<User> findByLastname(String lastname, Sort sort);\n\nList<User> findByLastname(String lastname, Pageable pageable);\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("h2",{attrs:{id:"一对多级联存储"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一对多级联存储"}},[a._v("#")]),a._v(" 一对多级联存储")]),a._v(" "),n("p",[a._v("一对多的级联存储时，需要配置好关联关系，然后将自增ID置空即可。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v(' Feature ageFeature = new Feature();\n        ageFeature.setName("年龄");\n        ageFeature.setStep(2);\n\n        ageFeature.setFeatureValues(Arrays.asList(\n                new FeatureValue(null, "10-20", ageFeature),\n                new FeatureValue(null, "20-30", ageFeature)\n        ));\n        return ageFeature;\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br")])]),n("h2",{attrs:{id:"uuid-生成策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uuid-生成策略"}},[a._v("#")]),a._v(" UUID 生成策略")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('    @Id\n    @GeneratedValue(generator = "UUID")\n    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")\n    private String id;\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("h2",{attrs:{id:"entity-实例里面常用注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#entity-实例里面常用注解"}},[a._v("#")]),a._v(" @Entity 实例里面常用注解")]),a._v(" "),n("h3",{attrs:{id:"entity"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#entity"}},[a._v("#")]),a._v(" @Entity")]),a._v(" "),n("p",[a._v("javax.persistence 包中提供，设置该对象会被 JPA 管理，并映射到指定的数据库表。")]),a._v(" "),n("p",[a._v("这个类可以给一个名字。")]),a._v(" "),n("h3",{attrs:{id:"table"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#table"}},[a._v("#")]),a._v(" @Table")]),a._v(" "),n("p",[a._v("指定数据库表名")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('// 表名，可以使用命名策略设置约定的名字\nString name() default "";\n// 数据库抽象概念,用于处理table 的命名冲突\nString catalog() default "";\n// 一般来说，是指数据库名\nString schema() default "";\n// 唯一约束，如果不使用 JPA 自动建表不用管\nUniqueConstraint[] uniqueConstraints() default {};\n// 索引，建表时候使用，一般来说不需要\nIndex[] indexes() default {};\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br")])]),n("h3",{attrs:{id:"id"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#id"}},[a._v("#")]),a._v(" @ID")]),a._v(" "),n("p",[a._v("指定为实体的主键，JPA 兼容遗留系统，使用复合主键。@IdClass")]),a._v(" "),n("p",[a._v("不过推荐不使用。")]),a._v(" "),n("h3",{attrs:{id:"generatedvalue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generatedvalue"}},[a._v("#")]),a._v(" @GeneratedValue")]),a._v(" "),n("p",[a._v("主键生成策略 GenerationType 中定义了四种主键生成策略")]),a._v(" "),n("ul",[n("li",[a._v("TABLE 通过表序列生成，框架模拟表增长")]),a._v(" "),n("li",[a._v("SEQUENCE 采用数据库序列增长，MySQL 不支持这种方式")]),a._v(" "),n("li",[a._v("IDENTITY 使用表主键的自动增长")]),a._v(" "),n("li",[a._v("AUTO 自动选择，默认设置选项，但不推荐使用")])]),a._v(" "),n("h3",{attrs:{id:"basic"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#basic"}},[a._v("#")]),a._v(" @Basic")]),a._v(" "),n("p",[a._v("属性到数据库字段的映射，如果实体属性上没有任何注解，默认为@Basic")]),a._v(" "),n("p",[a._v("使用 @Basic 提供了额外懒加载的特性，\b对大字段非常有用")]),a._v(" "),n("h3",{attrs:{id:"transient"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#transient"}},[a._v("#")]),a._v(" @Transient")]),a._v(" "),n("p",[a._v("设置为忽略，表明该字段不会被持久化。使用上和 @Basic 相反，JPA 映射数据库的时候选择忽略它。")]),a._v(" "),n("h3",{attrs:{id:"column"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#column"}},[a._v("#")]),a._v(" @Column")]),a._v(" "),n("p",[a._v("定义实体属性和数据库字段的列名，这个注解的参数比较多。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('// 列名\nString name() default "";\n// 是否唯一\nboolean unique() default false;\n// 是否允许为空，用于建表时使用\nboolean nullable() default true;\n// 是否插入数据库\nboolean insertable() default true;\n// 是否运行更新数据库\nboolean updatable() default true;\n// 表名，用的比较少\nString table() default "";\n// 下面三个用于创建表的属性设定\nint length() default 255;\nint precision() default 0;\nint scale() default 0;\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br")])]),n("h3",{attrs:{id:"temporal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#temporal"}},[a._v("#")]),a._v(" @Temporal")]),a._v(" "),n("p",[a._v("Temporal 用于设置 Date 类型的属性到对应精度的字段。")]),a._v(" "),n("ul",[n("li",[a._v("TemporalType.DATE 映射为日期")]),a._v(" "),n("li",[a._v("TemporalType.TIME 映射为时间")]),a._v(" "),n("li",[a._v("TemporalType.TIMESTAMP 映射为时间戳")])]),a._v(" "),n("h3",{attrs:{id:"enumerated"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enumerated"}},[a._v("#")]),a._v(" Enumerated")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("    @Enumerated(STRING)\n    private AccountRoles role;\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("p",[a._v("可以将字符串类型变成枚举类型，如果不使用这种方式，枚举会被自动转换为数字。如果将来发生变化，就无法映射回到正确的枚举值。需要注意的是，定义枚举时，如没有任何 valueOf的方法，在序列化和反序列化时对大小写敏感。")]),a._v(" "),n("h3",{attrs:{id:"lob"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lob"}},[a._v("#")]),a._v(" @Lob")]),a._v(" "),n("p",[a._v("建表时候映射为大字段")]),a._v(" "),n("ul",[n("li",[a._v("如果是字符串类型会映射为 Clob 类型")]),a._v(" "),n("li",[a._v("如果是字节类型，会映射为 Blob")])]),a._v(" "),n("h3",{attrs:{id:"joincolumn"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#joincolumn"}},[a._v("#")]),a._v(" @JoinColumn")]),a._v(" "),n("p",[a._v("配合 @OneToOne、@OneToMany、ManyToOne 使用，单独使用没有意义。")]),a._v(" "),n("p",[a._v("@JoinColumn 多个字段的关联关系，很少用")]),a._v(" "),n("h3",{attrs:{id:"onetoone"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#onetoone"}},[a._v("#")]),a._v(" @OneToOne")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('// 默认当前字段的类型\nClass targetEntity() default void.class;\n// 级联操作类型\nCascadeType[] cascade() default {};\n\n1. CascadeType.ALL\n2. CascadeType.PERSIST\n3. CascadeType.MERGE\n4. CascadeType.REMOVE\n5. CascadeType.REFRESH\n6. CascadeType.DETACH\n\n// 是否懒加载\n\nFetchType fetch() default EAGER;\n\n// 是否为空\n boolean optional() default true;\n\n// 配置对方拥有关系\nString mappedBy() default "";\n\n// 是否允许级联删除\nboolean orphanRemoval() default false;\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br")])]),n("p",[a._v('@OneToOne 需要和 @JoinColumn(name = "solution_id") 配合使用。')]),a._v(" "),n("p",[a._v("例如一个用户对应有一个头像")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('    @OneToOne(cascade = CascadeType.ALL)\n    @JoinColumn(name = "avatar_id")\n    private UserAvatar userAvatar;\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("h3",{attrs:{id:"onetomany-和-manytoone"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#onetomany-和-manytoone"}},[a._v("#")]),a._v(" @OneToMany 和 @ManyToOne")]),a._v(" "),n("p",[a._v("这两个参数和 @OneToOne 差不多，也需要和 @JoinColumn 配合使用")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('\n    @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)\n    @JoinColumn(name = "feature_id")\n    private List<FeatureValue> featureValues;\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("p",[a._v("@OneToMany 需要额外配合使用的注解是 @OrderBy")]),a._v(" "),n("p",[a._v("在 @OneToMany 中，使用 @OrderBy 控制列表的顺序")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('    @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)\n    @JoinColumn(name = "feature_id")\n    @OrderBy("order DESC")\n    private List<FeatureValue> featureValues;\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("h2",{attrs:{id:"manytomany"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#manytomany"}},[a._v("#")]),a._v(" @ManyToMany")]),a._v(" "),n("p",[a._v("多对多一般发生在聚合根之间，其中有一个隐藏的关联表。")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('    @ManyToMany\n    @JoinTable(name = "product_feature_value",\n            joinColumns = {@JoinColumn(name = "product_id", referencedColumnName = "id")},\n            inverseJoinColumns = {@JoinColumn(name = "feature_value_id", referencedColumnName = "id")}\n    )\n    private List<FeatureValue> featureValues;\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br")])]),n("p",[a._v("一个 Product 有多个 FeatureValue，使用多对多需要引入 product_feature_value 中间表。")]),a._v(" "),n("h2",{attrs:{id:"entitygraph-解决-n-1-条-sql-的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#entitygraph-解决-n-1-条-sql-的问题"}},[a._v("#")]),a._v(" @EntityGraph 解决 N+1 条 SQL 的问题")]),a._v(" "),n("p",[a._v("使用一对多，多对多关联的时，会产生 N+1 条SQL，我们可以通过使用 Join 来避免这种情况。")]),a._v(" "),n("p",[a._v("使用 join 有三种方法")]),a._v(" "),n("ul",[n("li",[a._v("@EntityGraph 在实体关联阶段解决")]),a._v(" "),n("li",[a._v("@Query JPQL")]),a._v(" "),n("li",[a._v("Criteria API 编写 JOIN 子句")])]),a._v(" "),n("p",[a._v("使用 @EntityGraph")]),a._v(" "),n("p",[a._v("现在实体上定义")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('@Table(name = "user")\n@NamedEntityGraph(name="userReadModel.department",attributeNodes={@NamedAttributeNode("department")})\npublic class UserReadModel {\n\n    @ManyToOne\n    @JoinColumn(name = "department_id")\n    private Department department;\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br")])]),n("p",[a._v("在查询的方法上使用即可")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('@Repository\npublic interface UserReadModelRepository extends JpaRepository<UserReadModel, Long>,\n        JpaSpecificationExecutor<UserReadModel> {\n\n    @EntityGraph(value = "userReadModel.department" , type= EntityGraph.EntityGraphType.FETCH)\n    List<UserReadModel> findAll(@Nullable Specification<UserReadModel> spec);\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br")])]),n("h2",{attrs:{id:"一些坑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一些坑"}},[a._v("#")]),a._v(" 一些坑")]),a._v(" "),n("ol",[n("li",[a._v("@ManyToOne 如果 one 这一方不存在，会报错，即使设置了 Optional")]),a._v(" "),n("li",[a._v("应该使用 DDD 思想去设计关联，减少不必要的关联，聚合根之间不要关联。查询使用 join 完成")]),a._v(" "),n("li",[a._v("@OneToMany 关系默认懒加载会报错，应该设置为 Eager，或者使用 @Transactional 但是会带来性能开销")]),a._v(" "),n("li",[a._v("@OneToOne 本质上是实体和值对象的关系，统一使用实体的ID")]),a._v(" "),n("li",[a._v("@ManyToMany 默认会删除关联表")]),a._v(" "),n("li",[a._v("@Save  时候如果外键在对应表中，找不到目标记录会丢出错误,例如用户属于某个部门,拥有多个 Role")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('\n{\n  username:"",\n  department:{\n    id: 1\n  },\n  roles:[\n    {\n      id:1\n    }\n  ]\n}\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br")])]),n("p",[a._v("当 role 的 ID 在数据库中不存在时，会报错，需要处理异常。")]),a._v(" "),n("ol",{attrs:{start:"7"}},[n("li",[a._v("当数据库插入异常，会报错，例如违反主键规则")]),a._v(" "),n("li",[a._v("更新、插入，只要不报错都会返回成功，无需再检查返回值")])]),a._v(" "),n("h2",{attrs:{id:"jpa-和建表规范"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jpa-和建表规范"}},[a._v("#")]),a._v(" JPA 和建表规范")]),a._v(" "),n("ul",[n("li",[a._v("根据 DDD 原则建表\n"),n("ul",[n("li",[a._v("例如 user user_avatar user_role")])])])]),a._v(" "),n("h2",{attrs:{id:"性能优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[a._v("#")]),a._v(" 性能优化")]),a._v(" "),n("ol",[n("li",[a._v("不要有一些无意义的关联")]),a._v(" "),n("li",[a._v("使用 NamedEntityGraph 帮我们一次抓取数据，可以明显减少 SQL 数量")])]),a._v(" "),n("h2",{attrs:{id:"在-spring-data-中使用-entitymanager-直接操作数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在-spring-data-中使用-entitymanager-直接操作数据"}},[a._v("#")]),a._v(" 在 Spring data 中使用 entityManager 直接操作数据")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('  @Autowired\n  EntityManager entityManager;\n\n  Role role = entityManager.find(Role.class, savedRole.getId());\n  assertEquals("remark", role.getRemark());\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br")])]),n("h2",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[a._v("#")]),a._v(" 参考资料")]),a._v(" "),n("ul",[n("li",[a._v("示例项目 https://github.com/spring-projects/spring-data-examples/tree/master/jpa")]),a._v(" "),n("li",[a._v("Spring data  中文版本 https://blog.csdn.net/yongboyhood/article/details/81226553")]),a._v(" "),n("li",[a._v("JPA 教程 https://www.yiibai.com/jpa/jpa-introduction.html")])])])}),[],!1,null,null,null);e.default=t.exports},749:function(a,e,s){a.exports=s.p+"assets/img/simple-jpa-repository-diagram.a1323ad9.png"}}]);